require 'bolt_train_runner/conf'
require 'bolt_train_runner/session_runner'
require 'bolt_train_runner/log'

module Commands
  def self.sessions(args, comms, session_runner, log)
    if args.empty? || args[0] =~ /help/i
      log.help('Command: sessions')
      log.help('Syntax: sessions <start|stop>')
      log.help('Start or stop the thread that monitors the sessions folder for sessions files. When running, this thread')
      log.help('will automatically execute the commands contained in sessions files generated by the bolt-train-api server')
      log.help('as they appear in the folder.')
      return
    end
    
    state = args[0]
    starting = state == 'start'
    if !['start','stop'].include?(state)
      log.error('Please provide either "start" or "stop"')
      return
    end

    unless comms
      log.error('Please connect first')
      return
    end

    if starting and session_runner
      log.warn('Session runner thread already started')
      return session_runner
    end

    if !starting and !session_runner
      log.warn('No session runner thread currently running')
      return nil
    end

    if starting
      conf = Conf.load_conf
      if args[1]
        session_dir = args[1]
        conf['session_dir'] = session_dir
        Conf.save_conf(conf)
      else
        session_dir = conf['session_dir']
        unless session_dir
          # This should be changed to pick up BOLT_TRAIN_QUEUE_DIR automatically
          prompt = 'Please enter directory for session files [/tmp/bolt-train-queue] > '
          print prompt
          session_dir = gets.chomp
          session_dir = '/tmp/bolt-train-queue' if session_dir.empty?
          conf['session_dir'] = session_dir
          Conf.save_conf(conf)
          log.info_file("#{prompt} #{session_dir}")
        end
      end
      
      runner = SessionRunner.new(comms, session_dir, log)
      runner.start
      return runner
    else
      session_runner.stop
      return nil
    end
  end
end